"
" ENVIRONMENT
"
if !has('nvim') && !empty($XDG_CONFIG_HOME)
    "shift as much vim cruft out of $HOME
    set directory=$XDG_CACHE_HOME/vim,/tmp
    set backupdir=$XDG_CACHE_HOME/vim,/tmp
    set viminfo+=n$XDG_CACHE_HOME/vim/viminfo,'33
    set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIMRUNTIME
endif
if !empty($XDG_DATA_HOME)
    "work out of XDG_DATA_HOME, if possible
    let g:python2_host_prog = expand("$XDG_DATA_HOME/vim/venv2/bin/python2")
    let g:python3_host_prog = expand("$XDG_DATA_HOME/vim/venv3/bin/python")
    let g:plug_home = expand("$XDG_DATA_HOME/vim/plugged")
endif

"
" PLUGINS
"
call plug#begin()
Plug 'airblade/vim-gitgutter'           "track file changes
Plug 'justinmk/vim-sneak'               "lightweight easymotion
Plug 'kana/vim-textobj-user'            "depend for lots of textobjs
Plug 'ludovicchabant/vim-gutentags'     "ctags/cscope manager
Plug 'romainl/vim-qf'                   "quickfix window enhancements
Plug 'romainl/vim-qlist'                "use quickfix as much as possible
Plug 'tommcdo/vim-lion'                 "align text by char with 'gl', 'gL'
Plug 'tpope/vim-characterize'           "more useful 'ga'
Plug 'tpope/vim-commentary'             "quick comment/uncomment
Plug 'tpope/vim-eunuch'                 "vim sugar on common unix commands
Plug 'tpope/vim-fugitive'               "vim sugar on some git commands
Plug 'tpope/vim-repeat'                 "extends default 'repeat action'
Plug 'tpope/vim-rsi'                    "love me some emacs keybindings
Plug 'tpope/vim-surround'               "adds an 's' (surround) operator
Plug 'wellle/targets.vim'               "beautifully extends default textobj

Plug 'octol/vim-cpp-enhanced-highlight' "tried to live without this, couldn't

Plug 'reedes/vim-lexical'               "keymaps, sensible spellcheck
Plug 'reedes/vim-litecorrect'           "lightweight autocorrect

Plug 'fatih/vim-go'                     "golang syntax/completion/tags
Plug 'davidhalter/jedi-vim'             "python completion/tag navigation
Plug 'bps/vim-textobj-python'           "objs -- f:function, c:class

Plug 'HerringtonDarkholme/yats.vim'     "typescript syntax
Plug 'pangloss/vim-javascript'          "javascript syntax highlighting
Plug 'mxw/vim-jsx'                      "jsx syntax highlighting

Plug 'owickstrom/vim-colors-paramount'  "minimal theme
Plug 'romainl/flattened'                "slightly less minimal theme

Plug 'reedes/vim-pencil'                "markdown qol
Plug 'reedes/vim-textobj-sentence'      "objs -- s:sentence
call plug#end()

"
" GENERAL SETTINGS
"
filetype plugin indent on
syntax enable

runtime macros/matchit.vim

set noerrorbells                "don't beep the terminal incessantly
set novisualbell                "don't set the visual bell incessantly
set t_vb=                       "yet another place we need to disable bells

set autoindent                  "minimal auto-indent for any filetype
set backspace=indent,eol,start  "proper backspace behaviour
set formatoptions+=j,1          "prune comments on joins, smarter linebreak
set hidden                      "allow more than one unsaved buffer
set cindent                     "saner indent logic
set smarttab                    "backspace tries to delete shifwidth/tabstop
set list                        "show trailing whitespace,tabs
set tags=./tags;,tags           "look for tags in current dir, parent dirs
set virtualedit=block           "cursor goes (almost) anywhere in visual mode

set switchbuf=useopen,usetab    "try and find all prexisting buffers

set wildmenu                    "comand-line completion
set wildignorecase              "ignore casei n wildmenu completion
set wildignore+=*.swp,*.bak     "clean up the wildmenu
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=*/min/*,*/vendor/*
set wildignore+=*.tar.*,*.pyc
set wildignore+=tags,cscope.*

set path=.,**                   "search current directory, all subdirectories
set history=100                 "small command history
set formatoptions+=1            "don't break on 1-letter words

set complete-=i                 "don't scan current/included files
set nrformats-=octal            "don't show octal with ga (vim-characterize)
set title titlestring=%F        "show the filepath as the title

set ttimeout                    "wait for keycodes to complete
set ttimeoutlen=100             "timeout for keycodes

set autoread                    "reload changed files when possible
set sessionoptions-=options     "don't save options in sessions
set noswapfile                  "never saw the point of .swp

set expandtab                   "spaces > tabs, whenever possible
set shiftwidth=4                "4 spaces per indent level
set tabstop=4                   "tab = 4 spaces (mostly for Makefiles)
set shiftround                  "round indent to multiples of 4

set splitbelow                  "open new hsplits to the bottom
set splitright                  "open new vsplits to the right
set previewheight=1             "smaller preview window

set gdefault                    "/g enabled in substitute command by default
set ignorecase                  "ignore case when matching patterns by default
set smartcase                   "override ignorecase if pattern has capitals

"set colorcolumn=79              "don't go crazy with indentation
set breakindent                 "wrapped lines inherit indent
set wrap                        "explicitly wrap with :wrap
set scrolloff=5                 "small offset at the screen right
set scrolloff=8                 "small offset at the screen bottom

set foldlevelstart=99           "don't collapse anything by default
set foldmethod=indent           "use indent to form folds

set mouse=a                     "disable mouse
set cscopetag                  "use cscope tags in addition to ctags
set csto=1                     "search ctags before cscope

set incsearch                   "show matches while searching
set hlsearch                    "show highlighted search terms
if maparg('<C-L>', 'n') ==# ''  "<C-L> to clear incsearch hl
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

"aggressively open folds automatically
set foldopen=hor,insert,jump,mark,percent,quickfix,search,tag,undo
"show trailing whitespace + tabs with ':set list'
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
"always use a popup complete menu, insert longest common text, preview window
set completeopt=menu,menuone,longest,preview

"
" THEMING
"
set background=dark
colorscheme flattened_dark

"
" GUI
"

set guifont=Terminus\ 14,Fira\ Code\ 12,Hasklig:h12
set guioptions+=ch  "avoid window popups, limit horizontal scrollbar size
set guioptions-=r   "don't show right-hand scrollbar
set guioptions-=L   "don't show left-hand scrollbar
set guioptions-=T   "never show toolbar
set guioptions-=m   "never show menu

"
" PERFORMANCE TWEAKS
"
set lazyredraw                  "no screen redraw during macros
aug use_rg                      "rg is faster than grep, use if installed
    if executable('rg')
        set grepprg=rg\ --vimgrep\ $*
        set grepformat=%f:%l:%c:%m
    endif
aug END

"
" STATUSLINE
"
set laststatus=2                            "always show the status bar
set statusline=                             "rhs statusline
set stl+=\ %t%m\                            "relative file path
set stl+=%(\ %{fugitive#head(1)}%)\        "current git branch
set statusline+=%=                          "lhs statusline
set stl+=%(%{&filetype}\ \|\ %)             "filetype
set stl+=%([%W%R]\ %)                       "flags
set stl+=%(%3l/%L\ :%2v\ %)                 "cursor/line position, %'age

"
" MINIMAL KEYMAPS
"
let mapleader="\<Space>"                    "sensible mapleader

"
" PLUGIN SETTINGS
"
let g:gitgutter_map_keys=1              "use the gitgutter keybinds
let g:sneak#streak=1                    "vim-sneak smart streak mode

"
" CUSTOM FUNCTIONS
"
function! StripWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction
command! StripWhitespace :call StripWhitespace()
